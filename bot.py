import logging
import telebot
import requests
import sqlite3
import time
from database import Database
from info import SYSTEM_PROMPT, CONTINUE_STORY, END_STORY
from telebot import types
from config import TOKEN, iam_token, f_id, MAX_TOKENS_IN_SESSION, MAX_USERS, MAX_TOKENS
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

DB_FILE = "chatbot.db"
db = Database(DB_FILE)

logging.basicConfig(filename='log_file.txt', level=logging.ERROR)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = {}


# –§—É–Ω–∫—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö 2-—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def is_limit_users():
    connection = sqlite3.connect('chatbot.db')
    cursor = connection.cursor()
    result = cursor.execute('SELECT DISTINCT user_id FROM users;')  # Assuming 'users' table exists with 'user_id'
    count = 0
    for _ in result:
        count += 1
    connection.close()
    return count >= MAX_USERS


def is_user_in_db(user_id):
    connection = sqlite3.connect('chatbot.db')
    cursor = connection.cursor()
    result = cursor.execute('SELECT user_id FROM users WHERE user_id = ?;', (user_id,))
    user = result.fetchone()
    connection.close()
    return user is not None


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if is_limit_users() and not is_user_in_db(user_id):
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ë–æ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
        return
    user_name = message.from_user.first_name
    if is_user_in_db(user_id):
        text = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è —Å–Ω–æ–≤–∞! –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /writing —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç.'
    else:
        db.create_user_if_not_exist(user_id)
        text = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è üëã, {user_name}!\n –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /writing —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–π —Å—é–∂–µ—Ç."
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['info'])  # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
def info(message):
    bot.send_message(message.chat.id,
                     "–ë–æ—Ç-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç ‚Äî —ç—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç —Å —Ñ—É–Ω–∫—Ü–∏–µ–π YandexGPT, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                     "—Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å—é–∂–µ—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ –Ω–µ–π —Å–≤–æ–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"               
                     "\n–ñ–µ–ª–∞—é –í–∞–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!")


@bot.message_handler(commands=['debug'])  # —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –±–æ—Ç–∞
def send_logs(message):
    with open("log_file.txt", "rb") as f:
        bot.send_document(message.chat.id, f)


@bot.message_handler(commands=['help'])  # –≤—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
def say_start(message):
    bot.send_message(message.chat.id, " –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã üìã:\n"
                                      "\n/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"
                                      "\n/help - —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                                      "\n/info - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–æ—Ç–µ-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–µ>"
                                      "\n/writing ‚Äì –Ω–∞—á–∞–ª–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—é–∂–µ—Ç–∞"
                                      "\n/limits ‚Äì –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏/—Å–µ—Å—Å–∏—è–º–∏"
                                      "\n/debug - —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –±–æ—Ç–∞")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
@bot.message_handler(commands=['writing'])
def handle_writing(message):
    if not is_user_in_db(message.from_user.id):
        bot.send_message(message.chat.id, f"–ò–∑–≤–∏–Ω–∏—Ç–µ, {message.from_user.first_name}, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_fantasy = types.KeyboardButton('–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞')
    button_horror = types.KeyboardButton('–•–æ—Ä—Ä–æ—Ä')
    button_comedy = types.KeyboardButton('–ö–æ–º–µ–¥–∏—è')
    keyboard.add(button_fantasy, button_horror, button_comedy)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
@bot.message_handler(func=lambda message: message.text in ['–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–•–æ—Ä—Ä–æ—Ä', '–ö–æ–º–µ–¥–∏—è'])
def handle_genre(message):
    user_id = message.chat.id
    user_data[user_id] = {'genre': message.text}
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_dasha = types.KeyboardButton('–î–∞—à–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞')
    button_pasha = types.KeyboardButton('–í–∏–∫—Ç–æ—Ä –¶–æ–π')
    button_yulia = types.KeyboardButton('–ú–∞—à–∞')
    button_kirill = types.KeyboardButton('–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥')
    keyboard.add(button_dasha, button_pasha, button_yulia, button_kirill)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@bot.message_handler(func=lambda message: message.text in ['–î–∞—à–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞', '–í–∏–∫—Ç–æ—Ä –¶–æ–π', '–ú–∞—à–∞', '–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥'])
def handle_character(message):
    user_id = message.chat.id
    user_data[user_id]['character'] = message.text
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ª–æ–∫–∞—Ü–∏–∏
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_city = types.KeyboardButton('–ì–æ—Ä–æ–¥')
    button_forest = types.KeyboardButton('–õ–µ—Å')
    button_desert = types.KeyboardButton('–ü—É—Å—Ç—ã–Ω—è')
    keyboard.add(button_city, button_forest, button_desert)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
@bot.message_handler(func=lambda message: message.text in ['–ì–æ—Ä–æ–¥', '–õ–µ—Å', '–ü—É—Å—Ç—ã–Ω—è'])
def handle_location(message):
    user_id = message.chat.id
    user_data[user_id]['location'] = message.text
    send_prompt_or_additional_info(user_id)


def send_prompt_or_additional_info(user_id):
    prompt_button = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É')
    info_button = KeyboardButton('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add(prompt_button, info_button)
    bot.send_message(user_id, "–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç —Å—Ä–∞–∑—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?", reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
def handle_additional_info(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:")
    bot.register_next_step_handler(message, process_additional_info)


def process_additional_info(message):
    user_id = message.chat.id
    additional_info = message.text
    user_data[user_id]['additional_info'] = additional_info
    send_send_button(user_id)


@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É')
def handle_send_prompt(message):
    user_id = message.from_user.id
    prompt = create_prompt(user_data, user_id)
    gpt_response = ask_gpt(prompt, [], mode='continue')
    try:
        bot.send_message(user_id, gpt_response)
    except telebot.apihelper.ApiTelegramException as e:
        if e.error_code == 400 and e.description == 'Bad Request: message text is empty':
            logging.error("Error sending message: Telegram API error: message text is empty")
        else:
            logging.error(f"Telegram API error: {e}")
    user_data[user_id] = {}
    send_restart_button(user_id)


def send_send_button(user_id):
    send_button = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å')
    send_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    send_keyboard.add(send_button)
    bot.send_message(user_id, "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.", reply_markup=send_keyboard)
    prompt = create_prompt(user_data, user_id)
    gpt_response = ask_gpt(prompt, [], mode='continue')
    try:
        bot.send_message(user_id, gpt_response)
    except telebot.apihelper.ApiTelegramException as e:
        if e.error_code == 400 and e.description == 'Bad Request: message text is empty':
            logging.error("Error sending message: Telegram API error: message text is empty")
        else:
            logging.error(f"Telegram API error: {e}")
    user_data[user_id] = {}
    send_restart_button(user_id)


def send_restart_button(user_id):
    restart_button = types.KeyboardButton('–ó–∞–Ω–æ–≤–æ')
    restart_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    restart_keyboard.add(restart_button)
    time.sleep(5)
    bot.send_message(user_id, text='–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ "–ó–∞–Ω–æ–≤–æ"', reply_markup=restart_keyboard)


@bot.message_handler(func=lambda message: message.text == '–ó–∞–Ω–æ–≤–æ')
def handle_restart_button(message):
    handle_restart(message)  # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_restart –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–Ω–æ–≤–æ"


@bot.message_handler(commands=['restart'])
def handle_restart(message):
    if not is_user_in_db(message.from_user.id):
        bot.send_message(message.chat.id, f"–ò–∑–≤–∏–Ω–∏—Ç–µ, {message.from_user.first_name}, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    handle_writing(message)


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π/–≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def create_prompt(user_data, user_id):
    user_session_count, _ = db.get_session_data(user_id)
    if user_session_count >= 3:
        session_count, session_tokens = db.get_session_data(user_id)
        try:
            bot.send_message(user_id, f"–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–µ—Å—Å–∏–π {session_count} –∏–∑ 3.")
        except telebot.apihelper.ApiTelegramException as e:
            if e.error_code == 400 and e.description == 'Bad Request: message text is empty':
                logging.error("Error sending message: Telegram API error: message text is empty")
            else:
                logging.error(f"Telegram API error: {e}")
        return
    prompt = _create_prompt(user_data, user_id)
    return prompt


def _create_prompt(user_data, user_id):
    prompt = SYSTEM_PROMPT
    try:
        if user_id in user_data:
            if 'genre' in user_data[user_id] and 'character' in user_data[user_id] and 'location' in user_data[user_id]:
                genre = user_data[user_id]['genre']
                character = user_data[user_id]['character']
                location = user_data[user_id]['location']
                additional_info = user_data[user_id].get('additional_info', '–Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
                user_session_count, user_session_tokens = db.get_session_data(user_id)
                prompt += f"\n–ù–∞–ø–∏—à–∏ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Å—Ç–∏–ª–µ {genre} —Å –≥–ª–∞–≤–Ω—ã–º –≥–µ—Ä–æ–µ–º {character}. "
                prompt += f"–í–æ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–µ—Ç—Ç–∏–Ω–≥: \n{location}. \n"
                prompt += f"–¢–∞–∫–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ—Å–∏–ª —É—á–µ—Å—Ç—å —Å–ª–µ–¥—É—é—â—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {additional_info} "
                prompt += '–ù–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ. –û–Ω —Å–∞–º –∑–Ω–∞–µ—Ç'
                answer = ask_gpt(prompt, [], mode='continue')
                tokens = prompt.split()
                num_tokens = len(tokens)
                db.save_prompt_to_db(user_id, prompt)
                db.update_session_tokens(user_id, user_session_tokens + num_tokens)
                db.update_session_count(user_id, user_session_count + 1)
                db.update_answer(user_id, answer)
    except Exception as ex:
        logging.error(f"Unexpected error: {str(ex)}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."
    return prompt


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º—Ç–∞ –Ω–∞ API YandexGPT-lite
def ask_gpt(prompt, collection, mode='continue'):
    try:
        token = iam_token
        folder_id = f_id
        url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        headers = {'Authorization': f'Bearer {token}', 'Content-Type': 'application/json'}
        data = {
            "modelUri": f"gpt://{folder_id}/yandexgpt-lite",
            "completionOptions": {"stream": False, "temperature": 0.6, "maxTokens": MAX_TOKENS},
            "messages": [{
                "role": "user",
                "text": prompt
            }]
        }
        for row in collection:
            if isinstance(row, dict) and 'content' in row:
                content = row['content']
                if mode == 'continue' and row['role'] == 'user':
                    content += '\n' + CONTINUE_STORY
                elif mode == 'end' and row['role'] == 'user':
                    content += '\n' + END_STORY
                data["messages"].append({"role": row["role"], "text": content})
        response = requests.post(url, headers=headers, json=data)
        if response.status_code != 200:
            logging.error(f"Status code {response.status_code}.")
            return # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º—Ç–∞ –Ω–∞ API
        response_text = response.json()['result']['alternatives'][0]['message']['text']
        tokens = response_text.split()
        if len(tokens) > 500:
            response_text = ' '.join(tokens[:500])
        return response_text
    except KeyError:
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'content' –≤ –¥–∞–Ω–Ω—ã—Ö."
    except Exception as e:
        logging.error(f"Unexpected error: {str(e)}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."


def exist_user(user_id):
    connection = sqlite3.connect('chatbot.db')
    cur = connection.cursor()
    query = f'''SELECT user_id FROM users_data WHERE user_id = {user_id}'''
    results = cur.execute(query)
    try:
        results = results.fetchone()[0]
    except:
        results = None
    connection.close()
    return results == user_id


def count_tokens(message):
    user_id = message.from_user.id
    connection = sqlite3.connect('chatbot.db')
    cur = connection.cursor()
    user_data = cur.execute(f'''SELECT * FROM users_data WHERE User to {user_id}''').fetchone()
    folder_id = f_id
    session_tokens = user_data[4]
    prompt = user_data(1)
    token = iam_token
    headers = {  # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø—Ä–æ—Å–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è IŒëŒú-œÑŒø–∫–µ–Ω
        "Authorization": f"Bearer {token}",  # token - –Ω–∞—à–∏ –®–ê–ú-—Ç–æ–∫–µ–Ω
        "Content-Type": "appLication/json"
    }
    data = {
        "modellird": f"gpt: //{folder_id}/yandexgpt-lite/latest",  # —É–∫–∞–∑—ã–≤–∞–µ–Ω folder_id
        "maxTokens": MAX_TOKENS_IN_SESSION,
        "text": prompt
    }

    tokens = cur.execute(f'''SELECT session_tokens FROM users_data WHERE user_id = (user_id)''').fetchone()[0]
    int(str(tokens))
    new_tokens = tokens + len(requests.post("https://lln.apis.cloud.yandex.net/foundationfodels/v1/tokenize", json=data, headers=headers).json()['tokens'])

    sql_query = "UPDATE users_data SET session_tokens = ? WHERE user_id = ?;"
    cur.execute(sql_query,  (new_tokens, user_id))
    connection.commit()

    if session_tokens > MAX_TOKENS_IN_SESSION:
        bot.send_message(message.chat.id, text="–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏")
    else:
        ask_gpt(message, [], mode='continue')
    connection.close()


@bot.message_handler(commands=['limits'])
def limits(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_limits = types.KeyboardButton('/limits')
    keyboard.add(button_limits)
    user_id = message.from_user.id
    session_count, session_tokens = db.get_session_data(user_id)
    bot.send_message(user_id, f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π: {session_count} –∏–∑ 3 \n–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É: {session_tokens}")


@bot.message_handler(content_types=['photo', 'video', 'audio', 'document', 'sticker'])
def handle_non_text_message(message):
    bot.send_message(message.chat.id, "‚ùó –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Å—Ç–∏–∫–µ—Ä—ã.")


bot.polling()

